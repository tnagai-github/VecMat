vv10:[0, 0, 0]
vecNd<VDIM>
VDIM =3
vv11:[1.000000, 1.000000, 1.000000]
vv12:[2.000000, 2.000000, 2.000000]
vv13:[0.500000, 1.000000, 2.000000]
vv14:[1.000000, 2.000000, 100.000000]
+vv14:[1.000000, 2.000000, 100.000000]
-vv14:[-1.000000, -2.000000, -100.000000]
vv13[0] :0.500000
vv13[1] :1.000000
vv13[2] :2.000000
Inner-product
 vv13*vv12     :7.000000
 dot(vv13,vv12):7.000000
 vv13.dot(vv12):7.000000
abs
 vv11.abs() :1.732051
 abs(vv11)  :1.732051
(vv11+vv13):[1.500000, 2.000000, 3.000000]
(vv11-vv13):[0.500000, 0.000000, -1.000000]
(20.0*vv11*10.0):[200.000000, 200.000000, 200.000000]
(vv11/10.0):[0.100000, 0.100000, 0.100000]
(vv11+=vv13) :[1.500000, 2.000000, 3.000000]
(vv11-=vv13) :[1.000000, 1.000000, 1.000000]
(vv11*=10.0) :[10.000000, 10.000000, 10.000000]
cross product (three dimension only)
cross(vv13,vv12): [-2.000000, 3.000000, -1.000000]
***********************

VDIM =4
vv21:[1.000000, 1.000000, 1.000000, 1.000000]
vv22:[2.000000, 2.000000, 2.000000, 2.000000]
vv23:[0.500000, 1.000000, 2.000000, -1.000000]
vv23[0] :0.500000
vv23[1] :1.000000
vv23[2] :2.000000
vv23[3] :-1.000000
vv23.at(3) :-1.000000
Inner-product
 vv23*vv22     :5.000000
 dot(vv23,vv22):5.000000
 vv13.dot(vv22):5.000000
abs
 vv21.abs() :2.000000
 abs(vv21)  :2.000000
(vv21+vv23):[1.500000, 2.000000, 3.000000, 0.000000]
(vv21-vv23):[0.500000, 0.000000, -1.000000, 2.000000]
(20.0*vv21*10.0):[200.000000, 200.000000, 200.000000, 200.000000]
(vv21/10.0):[0.100000, 0.100000, 0.100000, 0.100000]
(vv21+=vv23) :[1.500000, 2.000000, 3.000000, 0.000000]
(vv21-=vv23) :[1.000000, 1.000000, 1.000000, 1.000000]
(vv21*=10.0) :[10.000000, 10.000000, 10.000000, 10.000000]
***********************


***************************
matNd<VDIM>
VDIM =3
mat11:[[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]]
mat12:[[1.000000, 1.000000, 1.000000], [1.000000, 1.000000, 1.000000], [1.000000, 1.000000, 1.000000]]
mat13:[[0.000000, 1.000000, 1.200000], [5.400000, 0.000000, 0.900000], [2.400000, 1.300000, 0.000000]]
mat14:[[9.000000, 8.000000, 7.000000], [6.000000, 5.000000, 4.000000], [3.000000, 2.000000, 1.000000]]
+mat14:[[9.000000, 8.000000, 7.000000], [6.000000, 5.000000, 4.000000], [3.000000, 2.000000, 1.000000]]
-mat14:[[-9.000000, -8.000000, -7.000000], [-6.000000, -5.000000, -4.000000], [-3.000000, -2.000000, -1.000000]]
mat11[1][2]:0.000000
mat11[2][2]:1.000000
(mat11+=mat12):[[2.000000, 1.000000, 1.000000], [1.000000, 2.000000, 1.000000], [1.000000, 1.000000, 2.000000]]
(mat11-=mat12):[[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]]
(mat11+mat12):[[2.000000, 1.000000, 1.000000], [1.000000, 2.000000, 1.000000], [1.000000, 1.000000, 2.000000]]
(mat11-mat12):[[0.000000, -1.000000, -1.000000], [-1.000000, 0.000000, -1.000000], [-1.000000, -1.000000, 0.000000]]
mat11*=2.0: [[2.000000, 0.000000, 0.000000], [0.000000, 2.000000, 0.000000], [0.000000, 0.000000, 2.000000]]
mat11/=2.0: [[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]]
mat11*2.0: [[2.000000, 0.000000, 0.000000], [0.000000, 2.000000, 0.000000], [0.000000, 0.000000, 2.000000]]
mat11/2.0: [[0.500000, 0.000000, 0.000000], [0.000000, 0.500000, 0.000000], [0.000000, 0.000000, 0.500000]]
mat13: [[0.000000, 1.000000, 1.200000], [5.400000, 0.000000, 0.900000], [2.400000, 1.300000, 0.000000]]
mat13.T(): [[0.000000, 5.400000, 2.400000], [1.000000, 0.000000, 1.300000], [1.200000, 0.900000, 0.000000]]
mat13*mat13: [[8.280000, 1.560000, 0.900000], [2.160000, 6.570000, 6.480000], [7.020000, 2.400000, 4.050000]]
***************************
product of matrix and vector is also possible
mat13*vv12:[4.400000, 12.600000, 7.400000]
v12*mat13.T()[4.400000, 12.600000, 7.400000]
***************************


VDIM =4
mat21:[[1.000000, 0.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000, 0.000000], [0.000000, 0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 0.000000, 1.000000]]
mat22:[[1.000000, 1.000000, 1.000000, 1.000000], [1.000000, 1.000000, 1.000000, 1.000000], [1.000000, 1.000000, 1.000000, 1.000000], [1.000000, 1.000000, 1.000000, 1.000000]]
mat23:[[2.000000, 0.000000, 0.000000, 1.000000], [0.000000, 5.000000, 1.000000, 0.000000], [-2.000000, 0.000000, 4.000000, 0.000000], [0.000000, 1.000000, 1.000000, 1.000000]]
mat21[1][2]:0.000000
mat21[2][2]:1.000000
(mat21+=mat22):[[2.000000, 1.000000, 1.000000, 1.000000], [1.000000, 2.000000, 1.000000, 1.000000], [1.000000, 1.000000, 2.000000, 1.000000], [1.000000, 1.000000, 1.000000, 2.000000]]
(mat21-=mat22):[[1.000000, 0.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000, 0.000000], [0.000000, 0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 0.000000, 1.000000]]
(mat21+mat22):[[2.000000, 1.000000, 1.000000, 1.000000], [1.000000, 2.000000, 1.000000, 1.000000], [1.000000, 1.000000, 2.000000, 1.000000], [1.000000, 1.000000, 1.000000, 2.000000]]
(mat21-mat22):[[0.000000, -1.000000, -1.000000, -1.000000], [-1.000000, 0.000000, -1.000000, -1.000000], [-1.000000, -1.000000, 0.000000, -1.000000], [-1.000000, -1.000000, -1.000000, 0.000000]]
mat21*=2.0: [[2.000000, 0.000000, 0.000000, 0.000000], [0.000000, 2.000000, 0.000000, 0.000000], [0.000000, 0.000000, 2.000000, 0.000000], [0.000000, 0.000000, 0.000000, 2.000000]]
mat21/=2.0: [[1.000000, 0.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000, 0.000000], [0.000000, 0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 0.000000, 1.000000]]
mat21*2.0: [[2.000000, 0.000000, 0.000000, 0.000000], [0.000000, 2.000000, 0.000000, 0.000000], [0.000000, 0.000000, 2.000000, 0.000000], [0.000000, 0.000000, 0.000000, 2.000000]]
mat21/2.0: [[0.500000, 0.000000, 0.000000, 0.000000], [0.000000, 0.500000, 0.000000, 0.000000], [0.000000, 0.000000, 0.500000, 0.000000], [0.000000, 0.000000, 0.000000, 0.500000]]
mat23: [[2.000000, 0.000000, 0.000000, 1.000000], [0.000000, 5.000000, 1.000000, 0.000000], [-2.000000, 0.000000, 4.000000, 0.000000], [0.000000, 1.000000, 1.000000, 1.000000]]
mat23.T(): [[2.000000, 0.000000, -2.000000, 0.000000], [0.000000, 5.000000, 0.000000, 1.000000], [0.000000, 1.000000, 4.000000, 1.000000], [1.000000, 0.000000, 0.000000, 1.000000]]
mat23*mat23: [[4.000000, 1.000000, 1.000000, 3.000000], [-2.000000, 25.000000, 9.000000, 0.000000], [-12.000000, 0.000000, 16.000000, -2.000000], [-2.000000, 6.000000, 6.000000, 1.000000]]
***************************
product of matrix and vector is also possible
mat23*vv22:[6.000000, 12.000000, 4.000000, 6.000000]
v22*mat23.T():[6.000000, 12.000000, 4.000000, 6.000000]
***************************


***************************
Some rotation matrices are predefined
rot_by_x(45/360.*2*M_PI): [[1.000000, 0.000000, 0.000000], [0.000000, 0.707107, -0.707107], [0.000000, 0.707107, 0.707107]]
rot_by_y(45/360.*2*M_PI): [[0.707107, 0.000000, 0.707107], [0.000000, 1.000000, 0.000000], [-0.707107, 0.000000, 0.707107]]
rot_by_z(45/360.*2*M_PI): [[0.707107, -0.707107, 0.000000], [0.707107, 0.707107, 0.000000], [0.000000, 0.000000, 1.000000]]
***************************


***************************
Very basic matrix operation
triangle(mat13): [[5.400000, 1.000000, 2.100000], [0.000000, -1.000000, -1.200000], [-0.000000, 0.000000, -1.960000]]
(mat13.triangle()): [[5.400000, 1.000000, 2.100000], [0.000000, -1.000000, -1.200000], [-0.000000, 0.000000, -1.960000]]
det(mat13): 10.584000
(mat13.det()): 10.584000
triangle(mat23): [[2.000000, 0.000000, 0.000000, 1.000000], [0.000000, 5.000000, 1.000000, 0.000000], [0.000000, 0.000000, 4.000000, 1.000000], [0.000000, -0.000000, 0.000000, 0.800000]]
(mat23.triangle()): [[2.000000, 0.000000, 0.000000, 1.000000], [0.000000, 5.000000, 1.000000, 0.000000], [0.000000, 0.000000, 4.000000, 1.000000], [0.000000, -0.000000, 0.000000, 0.800000]]
det(mat23): 32.000000
(mat23.det()): 32.000000
(pow(mat23,0): [[1.000000, 0.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000, 0.000000], [0.000000, 0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 0.000000, 1.000000]]
(pow(mat23,1): [[2.000000, 0.000000, 0.000000, 1.000000], [0.000000, 5.000000, 1.000000, 0.000000], [-2.000000, 0.000000, 4.000000, 0.000000], [0.000000, 1.000000, 1.000000, 1.000000]]
(pow(mat23,2): [[4.000000, 1.000000, 1.000000, 3.000000], [-2.000000, 25.000000, 9.000000, 0.000000], [-12.000000, 0.000000, 16.000000, -2.000000], [-2.000000, 6.000000, 6.000000, 1.000000]]
***************************
[[[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]], [[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]], [[1.000000, 0.000000, 0.000000], [0.000000, 1.000000, 0.000000], [0.000000, 0.000000, 1.000000]]]
sum1: [[3.000000, 0.000000, 0.000000], [0.000000, 3.000000, 0.000000], [0.000000, 0.000000, 3.000000]]
 *wrapper's results*
[4.813607, 4.000000, 2.529317, 0.657077]
[0.000000, 0.000000, 0.000000, 0.000000]
[[-0.446013, 0.627453, 0.627453, -0.116953], [-0.670820, 0.223607, 0.670820, -0.223607], [-0.798683, 0.211378, 0.211378, -0.522249], [-0.310006, -0.208157, -0.208157, 0.904012]]
[[0.072761, 0.959585, -0.178860, 0.204721], [-0.000000, -0.707107, 0.707107, -0.000000], [-0.539753, 0.297090, -0.734016, -0.285700], [-0.560741, 0.077247, -0.335479, 0.753032]]
Eigen val[ 0 ]= 4.813607 + 0.000000 *i
Eigen val[ 1 ]= 4.000000 + 0.000000 *i
Eigen val[ 2 ]= 2.529317 + 0.000000 *i
Eigen val[ 3 ]= 0.657077 + 0.000000 *i
Eigen vec (left)
[-0.446013, 0.627453, 0.627453, -0.116953]
[-0.670820, 0.223607, 0.670820, -0.223607]
[-0.798683, 0.211378, 0.211378, -0.522249]
[-0.310006, -0.208157, -0.208157, 0.904012]
Eigen vec (right)
[0.072761, 0.959585, -0.178860, 0.204721]
[-0.000000, -0.707107, 0.707107, -0.000000]
[-0.539753, 0.297090, -0.734016, -0.285700]
[-0.560741, 0.077247, -0.335479, 0.753032]
***********
 *direct call of lapack *
[0.072761, 0.959585, -0.178860, 0.204721]
[-0.000000, -0.707107, 0.707107, -0.000000]
[-0.539753, 0.297090, -0.734016, -0.285700]
[-0.560741, 0.077247, -0.335479, 0.753032]
******
 *check Mv=av **
[0.350243, 4.619066, -0.860964, 0.985446]
[0.350243, 4.619066, -0.860964, 0.985446]
[-0.000000, -2.828427, 2.828427, -0.000000]
[-0.000000, -2.828427, 2.828427, -0.000000]
[-1.365206, 0.751436, -1.856559, -0.722626]
[-1.365206, 0.751436, -1.856559, -0.722626]
[-0.368450, 0.050757, -0.220436, 0.494800]
[-0.368450, 0.050757, -0.220436, 0.494800]
60.000000
60.000000
